import { describe, expect, test } from "@jest/globals";
import { Lexer } from "../src/compiler/lexer";
import fs from "fs";
import { Token, TokenConst } from "../src/compiler/token";

let file: string = "";

describe("Lexer tokenize", () => {
  beforeAll(() => {
    file = fs.readFileSync("examples/Example.java", "utf8");
  });
  test("Should return a list of tokens", () => {
    const lexer = new Lexer(file);
    const tokens = lexer.tokenize();
    const tokensExpected: Token[] = [
      { tokenType: TokenConst.Identifier, literal: "name1" },
      { tokenType: TokenConst.Eq, literal: "==" },
      { tokenType: TokenConst.Identifier, literal: "name2" },
      { tokenType: TokenConst.Semicolon, literal: ";" },
      { tokenType: TokenConst.Int, literal: "int" },
      { tokenType: TokenConst.Identifier, literal: "num3r0" },
      { tokenType: TokenConst.Assign, literal: "=" },
      { tokenType: TokenConst.Number, literal: "5" },
      { tokenType: TokenConst.Semicolon, literal: ";" },
      { tokenType: TokenConst.Package, literal: "package" },
      { tokenType: TokenConst.Identifier, literal: "example" },
      { tokenType: TokenConst.Semicolon, literal: ";" },
      { tokenType: TokenConst.Import, literal: "import" },
      { tokenType: TokenConst.Identifier, literal: "java" },
      { tokenType: TokenConst.Dot, literal: "." },
      { tokenType: TokenConst.Identifier, literal: "util" },
      { tokenType: TokenConst.Dot, literal: "." },
      { tokenType: TokenConst.Identifier, literal: "ArrayList" },
      { tokenType: TokenConst.Semicolon, literal: ";" },
      { tokenType: TokenConst.Import, literal: "import" },
      { tokenType: TokenConst.Identifier, literal: "java" },
      { tokenType: TokenConst.Dot, literal: "." },
      { tokenType: TokenConst.Identifier, literal: "util" },
      { tokenType: TokenConst.Dot, literal: "." },
      { tokenType: TokenConst.Identifier, literal: "List" },
      { tokenType: TokenConst.Semicolon, literal: ";" },
      { tokenType: TokenConst.Public, literal: "public" },
      { tokenType: TokenConst.Class, literal: "class" },
      { tokenType: TokenConst.Identifier, literal: "Example" },
      { tokenType: TokenConst.LBracket, literal: "{" },
      { tokenType: TokenConst.Private, literal: "private" },
      { tokenType: TokenConst.Identifier, literal: "ArrayList" },
      { tokenType: TokenConst.LowerThan, literal: "<" },
      { tokenType: TokenConst.Identifier, literal: "String" },
      { tokenType: TokenConst.GreaterThan, literal: ">" },
      { tokenType: TokenConst.Identifier, literal: "names" },
      { tokenType: TokenConst.Semicolon, literal: ";" },
      { tokenType: TokenConst.Public, literal: "public" },
      { tokenType: TokenConst.Identifier, literal: "Example" },
      { tokenType: TokenConst.LParen, literal: "(" },
      { tokenType: TokenConst.RParen, literal: ")" },
      { tokenType: TokenConst.LBracket, literal: "{" },
      { tokenType: TokenConst.Identifier, literal: "names" },
      { tokenType: TokenConst.Assign, literal: "=" },
      { tokenType: TokenConst.New, literal: "new" },
      { tokenType: TokenConst.Identifier, literal: "ArrayList" },
      { tokenType: TokenConst.LowerThan, literal: "<" },
      { tokenType: TokenConst.GreaterThan, literal: ">" },
      { tokenType: TokenConst.LParen, literal: "(" },
      { tokenType: TokenConst.RParen, literal: ")" },
      { tokenType: TokenConst.Semicolon, literal: ";" },
      { tokenType: TokenConst.Identifier, literal: "names" },
      { tokenType: TokenConst.Assign, literal: "=" },
      { tokenType: TokenConst.Literal, literal: "hello" },
      { tokenType: TokenConst.Semicolon, literal: ";" },
      { tokenType: TokenConst.RBracket, literal: "}" },
      { tokenType: TokenConst.Public, literal: "public" },
      { tokenType: TokenConst.Void, literal: "void" },
      { tokenType: TokenConst.Identifier, literal: "addName" },
      { tokenType: TokenConst.LParen, literal: "(" },
      { tokenType: TokenConst.Identifier, literal: "String" },
      { tokenType: TokenConst.Identifier, literal: "name" },
      { tokenType: TokenConst.RParen, literal: ")" },
      { tokenType: TokenConst.LBracket, literal: "{" },
      { tokenType: TokenConst.Identifier, literal: "names" },
      { tokenType: TokenConst.Dot, literal: "." },
      { tokenType: TokenConst.Identifier, literal: "add" },
      { tokenType: TokenConst.LParen, literal: "(" },
      { tokenType: TokenConst.Identifier, literal: "name" },
      { tokenType: TokenConst.RParen, literal: ")" },
      { tokenType: TokenConst.Semicolon, literal: ";" },
      { tokenType: TokenConst.RBracket, literal: "}" },
      { tokenType: TokenConst.Public, literal: "public" },
      { tokenType: TokenConst.Identifier, literal: "List" },
      { tokenType: TokenConst.LowerThan, literal: "<" },
      { tokenType: TokenConst.Identifier, literal: "String" },
      { tokenType: TokenConst.GreaterThan, literal: ">" },
      { tokenType: TokenConst.Identifier, literal: "getNames" },
      { tokenType: TokenConst.LParen, literal: "(" },
      { tokenType: TokenConst.RParen, literal: ")" },
      { tokenType: TokenConst.LBracket, literal: "{" },
      { tokenType: TokenConst.Return, literal: "return" },
      { tokenType: TokenConst.New, literal: "new" },
      { tokenType: TokenConst.Identifier, literal: "ArrayList" },
      { tokenType: TokenConst.LowerThan, literal: "<" },
      { tokenType: TokenConst.GreaterThan, literal: ">" },
      { tokenType: TokenConst.LParen, literal: "(" },
      { tokenType: TokenConst.Identifier, literal: "names" },
      { tokenType: TokenConst.RParen, literal: ")" },
      { tokenType: TokenConst.Semicolon, literal: ";" },
      { tokenType: TokenConst.RBracket, literal: "}" },
      { tokenType: TokenConst.RBracket, literal: "}" },
      { tokenType: TokenConst.Eof, literal: "\0" }
    ];
    expect(tokens).toStrictEqual(tokensExpected);
  });
});
